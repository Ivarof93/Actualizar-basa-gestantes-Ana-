import pandas as pd
import customtkinter as ctk
from tkinter import filedialog, messagebox
import os
from datetime import datetime
import threading
from openpyxl.styles import numbers


class SIGIRESConverter(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Conversor a Formato SIGIRES")
        self.geometry("700x500")
        self.minsize(600, 400)
        self.file_path = ""
        self.processing = False
        self.create_widgets()

    def create_widgets(self):
        # Frame principal
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # Título
        self.title_label = ctk.CTkLabel(
            self.main_frame,
            text="CONVERSOR SIGIRES",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        self.title_label.pack(pady=(10, 20))

        # Frame de selección de archivo
        self.file_frame = ctk.CTkFrame(self.main_frame)
        self.file_frame.pack(fill="x", padx=20, pady=(0, 20))

        self.file_label = ctk.CTkLabel(
            self.file_frame,
            text="Archivo de entrada:",
            font=ctk.CTkFont(size=12)
        )
        self.file_label.pack(anchor="w")

        self.file_entry = ctk.CTkEntry(
            self.file_frame,
            placeholder_text="Seleccione un archivo .txt",
            width=400
        )
        self.file_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))

        self.browse_btn = ctk.CTkButton(
            self.file_frame,
            text="Examinar",
            command=self.browse_file,
            width=100
        )
        self.browse_btn.pack(side="right")

        # Barra de progreso
        self.progress_label = ctk.CTkLabel(
            self.main_frame,
            text="Esperando archivo...",
            font=ctk.CTkFont(size=12)
        )
        self.progress_label.pack(pady=(10, 0))

        self.progressbar = ctk.CTkProgressBar(
            self.main_frame,
            orientation="horizontal",
            mode="determinate",
            height=20
        )
        self.progressbar.set(0)
        self.progressbar.pack(fill="x", padx=20, pady=(0, 20))

        # Botón de conversión
        self.convert_btn = ctk.CTkButton(
            self.main_frame,
            text="Convertir a SIGIRES",
            command=self.start_conversion,
            state="disabled",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.convert_btn.pack(pady=10)

        # Área de registro
        self.log_label = ctk.CTkLabel(
            self.main_frame,
            text="Registro de actividad:",
            font=ctk.CTkFont(size=12)
        )
        self.log_label.pack(anchor="w", padx=20)

        self.log_text = ctk.CTkTextbox(
            self.main_frame,
            wrap="word",
            font=ctk.CTkFont(family="Consolas", size=12),
            activate_scrollbars=True
        )
        self.log_text.pack(fill="both", expand=True, padx=20, pady=(0, 10))

    def browse_file(self):
        file_path = filedialog.askopenfilename(
            title="Selecciona el archivo .txt de entrada",
            filetypes=[("Archivos de texto", "*.txt")]
        )
        if file_path:
            self.file_path = file_path
            self.file_entry.delete(0, "end")
            self.file_entry.insert(0, file_path)
            self.convert_btn.configure(state="normal")
            self.log("Archivo seleccionado: " + file_path)
            self.update_progress(0, "Listo para convertir")

    def start_conversion(self):
        if not self.file_path:
            self.log("Error: No se ha seleccionado ningún archivo")
            return
        if self.processing:
            self.log("Advertencia: Ya hay una conversión en curso")
            return

        self.processing = True
        self.convert_btn.configure(state="disabled")
        self.browse_btn.configure(state="disabled")

        threading.Thread(
            target=self.process_file,
            args=(self.file_path,),
            daemon=True
        ).start()

    def process_file(self, file_path):
        try:
            self.log("\nIniciando conversión...")
            self.update_progress(5, "Leyendo archivo")

            # Leer archivo original
            df_original = pd.read_csv(file_path, sep="\t", dtype=str, encoding="latin1", quotechar='"')
            self.update_progress(15, "Archivo leído")

            # Definir estructura SIGIRES
            columnas_sigires = [
                'NOMBRE REGIONAL', 'NOMBRE ZONAL', 'NOMBRE DEPARTAMENTO', 'NOMBRE CIUDAD',
                'NOMBRE PROVINCIA', 'NOMBRE ZONA DE INFLUENCIA', 'CURSO VIDA', 'TIPO MUNICIPIO',
                'CODIGO HABILITACION IPS', 'NOMBRE IPS', 'TIPO DOCUMENTO', 'NUMERO IDENTIFICACION',
                'PRIMER NOMBRE', 'OTROS NOMBRES', 'PRIMER APELLIDO', 'OTROS APELLIDOS',
                'FECHA NACIMIENTO', 'SEXO', 'EDAD', 'PERTENENCIA ETNICA', 'OCUPACION', 'NIVEL EDUCATIVO',
                'TIPO REGIMEN', 'ESTADO', 'FECHA AFILIACION', 'PATOLOGIA', 'GESTANTE',
                'EDAD_GESTACIONAL', 'VPH PRIMERA', 'VPH SEGUNDA', 'VPH TERCERA',
                'TD O TT PRIMERA', 'TD O TT SEGUNDA', 'TD O TT TERCERA', 'TD O TT CUARTA',
                'TD O TT QUINTA', 'TDaP UNICA', 'INFLUENZA PRIMERA', 'INFLUENZA ADICIONAL',
                'NEUMOCOCO ULTIMA', 'FIEBRE AMARILLA UNICA', 'S-R ADICIONAL',
                'COVID TIPO PRIMERA', 'COVID FECHA PRIMERA', 'COVID TIPO SEGUNDA', 'COVID FECHA SEGUNDA',
                'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO', 'COVID TIPO REFUERZO 2', 'COVID FECHA REFUERZO 2',
                'HEPATITIS B PRIMERA', 'HEPATITIS B SEGUNDA', 'HEPATITIS B TERCERA', 'HEPATITIS B REFUERZO',
                'FECHA TAMIZAJE HB', 'RESULTADO TAMIZAJE HB', 'COVID TIPO ADICIONAL', 'COVID FECHA ADICIONAL'
            ]

            self.update_progress(20, "Creando estructura SIGIRES")
            df_sigires = pd.DataFrame(columns=columnas_sigires)

            # Función para formatear fechas
            def formatear_fecha(serie):
                return pd.to_datetime(serie, format='%d/%m/%Y', errors='coerce').dt.strftime('%d/%m/%Y').replace('NaT',
                                                                                                                 '')

            # Mapeo básico
            self.update_progress(25, "Mapeando datos básicos")
            mapeo_basico = {
                'TIPO DOCUMENTO': 'TipoIdentificacion',
                'NUMERO IDENTIFICACION': 'Documento',
                'PRIMER NOMBRE': 'PrimerNombre',
                'PRIMER APELLIDO': 'PrimerApellido',
                'SEXO': 'Sexo',
                'FECHA NACIMIENTO': 'FechaNacimiento',
                'NOMBRE DEPARTAMENTO': 'NombreDptoResidencia',
                'NOMBRE CIUDAD': 'NombreMunicipioResidencia',
                'PERTENENCIA ETNICA': 'GrupoEtnico',
                'TIPO REGIMEN': 'RegimenAfiliacion',
                'ESTADO': 'estado',
                'CODIGO HABILITACION IPS': 'Codigo_Entidad',
            }

            for sigires_col, original_col in mapeo_basico.items():
                df_sigires[sigires_col] = df_original.get(original_col, "")

            # Procesar fecha de nacimiento
            self.update_progress(40, "Procesando fechas")
            if 'FechaNacimiento' in df_original.columns:
                df_sigires['FECHA NACIMIENTO'] = formatear_fecha(df_original['FechaNacimiento'])

            # Calcular edad
            def calcular_curso_vida(edad):
                try:
                    edad = int(edad)
                except (ValueError, TypeError):
                    return ""
                if 0 <= edad <= 5:
                    return "Primera infancia"
                elif 6 <= edad <= 11:
                    return "Infancia"
                elif 12 <= edad <= 17:
                    return "Adolescencia"
                elif 18 <= edad <= 28:
                    return "Juventud"
                elif 29 <= edad <= 59:
                    return "Adultez"
                elif edad >= 60:
                    return "Vejez"
                return ""

            if 'FECHA NACIMIENTO' in df_sigires.columns:
                df_sigires['EDAD'] = pd.to_datetime(
                    df_sigires['FECHA NACIMIENTO'],
                    format='%d/%m/%Y',
                    errors='coerce'
                ).apply(lambda x: (datetime.now().year - x.year) if not pd.isnull(x) else "")
                df_sigires['CURSO VIDA'] = df_sigires['EDAD'].apply(calcular_curso_vida)

            # Mapeo de vacunas no COVID
            self.update_progress(50, "Procesando vacunas no COVID")
            mapeo_vacunas = {
                'VPH PRIMERA': 'VPH PRIMERA',
                'VPH SEGUNDA': 'VPH SEGUNDA',
                'VPH TERCERA': 'VPH TERCERA',
                'FA UNICA': 'FIEBRE AMARILLA UNICA',
                'TdaP ADULTO UNICA': 'TDaP UNICA',
                'TD ADULTOS PRIMERA': 'TD O TT PRIMERA',
                'TD ADULTOS SEGUNDA': 'TD O TT SEGUNDA',
                'TD ADULTOS TERCERA': 'TD O TT TERCERA',
                'TD ADULTOS CUARTA': 'TD O TT CUARTA',
                'TD ADULTOS QUINTA': 'TD O TT QUINTA',
                'INFLUENZA ADULTOS ANUAL': 'INFLUENZA PRIMERA',
                'NEUMOCOCO CONJUGADO 13 VALENTE PRIMERA': 'NEUMOCOCO ULTIMA',
                'NEUMOCOCO CONJUGADO 13 VALENTE SEGUNDA': 'NEUMOCOCO ULTIMA',
                'SARAMPION RUBEOLA ADICIONAL': 'S-R ADICIONAL',
                'HB ADULTOS PRIMERA': 'HEPATITIS B PRIMERA',
                'HB ADULTOS SEGUNDA': 'HEPATITIS B SEGUNDA',
                'HB ADULTOS TERCERA': 'HEPATITIS B TERCERA',
                'HB ADULTOS REFUERZO': 'HEPATITIS B REFUERZO'

            }

            for col_original, col_sigires in mapeo_vacunas.items():
                if col_original in df_original.columns:
                    if 'FECHA' in col_sigires:
                        df_sigires[col_sigires] = formatear_fecha(df_original[col_original])
                    else:
                        df_sigires[col_sigires] = df_original[col_original]
                else:
                    df_sigires[col_sigires] = ""

            # Procesamiento especial para vacunas COVID
            self.update_progress(60, "Procesando vacunas COVID")

            # Inicializar columnas COVID en SIGIRES
            covid_sigires_columns = [
                'COVID TIPO PRIMERA', 'COVID FECHA PRIMERA',
                'COVID TIPO SEGUNDA', 'COVID FECHA SEGUNDA',
                'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO',
                'COVID TIPO REFUERZO 2', 'COVID FECHA REFUERZO 2',
                'COVID TIPO ADICIONAL', 'COVID FECHA ADICIONAL'
            ]

            for col in covid_sigires_columns:
                df_sigires[col] = ''

            # Mapeo completo de columnas COVID
            covid_mapping = {
                # Primera dosis
                'COVID SINOVAC PRIMERA': ('SINOVAC', 'COVID TIPO PRIMERA', 'COVID FECHA PRIMERA'),
                'COVID PFIZER PRIMERA': ('PFIZER', 'COVID TIPO PRIMERA', 'COVID FECHA PRIMERA'),
                'COVID MODERNA PRIMERA': ('MODERNA', 'COVID TIPO PRIMERA', 'COVID FECHA PRIMERA'),
                'COVID JANSSEN UNICA': ('JANSSEN', 'COVID TIPO PRIMERA', 'COVID FECHA PRIMERA'),
                'COVID ASTRAZENECA PRIMERA': ('ASTRAZENECA', 'COVID TIPO PRIMERA', 'COVID FECHA PRIMERA'),

                # Segunda dosis
                'COVID SINOVAC SEGUNDA': ('SINOVAC', 'COVID TIPO SEGUNDA', 'COVID FECHA SEGUNDA'),
                'COVID PFIZER SEGUNDA': ('PFIZER', 'COVID TIPO SEGUNDA', 'COVID FECHA SEGUNDA'),
                'COVID MODERNA SEGUNDA': ('MODERNA', 'COVID TIPO SEGUNDA', 'COVID FECHA SEGUNDA'),
                'COVID JANSSEN SEGUNDA': ('JANSSEN', 'COVID TIPO SEGUNDA', 'COVID FECHA SEGUNDA'),
                'COVID ASTRAZENECA SEGUNDA': ('ASTRAZENECA', 'COVID TIPO SEGUNDA', 'COVID FECHA SEGUNDA'),

                # Primer refuerzo
                'COVID SINOVAC REFUERZO': ('SINOVAC', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID SINOVAC PRIMER REFUERZO': ('SINOVAC', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID PFIZER REFUERZO': ('PFIZER', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID PFIZER PRIMER REFUERZO': ('PFIZER', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID MODERNA REFUERZO': ('MODERNA', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID MODERNA PRIMER REFUERZO': ('MODERNA', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID JANSSEN REFUERZO': ('JANSSEN', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID JANSSEN PRIMER REFUERZO': ('JANSSEN', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID ASTRAZENECA REFUERZO': ('ASTRAZENECA', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),
                'COVID ASTRAZENECA PRIMER REFUERZO': ('ASTRAZENECA', 'COVID TIPO REFUERZO', 'COVID FECHA REFUERZO'),

                # Segundo refuerzo
                'COVID SINOVAC SEGUNDO REFUERZO': ('SINOVAC', 'COVID TIPO REFUERZO 2', 'COVID FECHA REFUERZO 2'),
                'COVID PFIZER SEGUNDO REFUERZO': ('PFIZER', 'COVID TIPO REFUERZO 2', 'COVID FECHA REFUERZO 2'),
                'COVID MODERNA SEGUNDO REFUERZO': ('MODERNA', 'COVID TIPO REFUERZO 2', 'COVID FECHA REFUERZO 2'),
                'COVID JANSSEN SEGUNDO REFUERZO': ('JANSSEN', 'COVID TIPO REFUERZO 2', 'COVID FECHA REFUERZO 2'),
                'COVID ASTRAZENECA SEGUNDO REFUERZO': (
                'ASTRAZENECA', 'COVID TIPO REFUERZO 2', 'COVID FECHA REFUERZO 2'),

                # Dosis adicionales (se mapean como adicionales)
                'COVID TIPO ADICIONAL': ('', 'COVID TIPO ADICIONAL', 'COVID FECHA ADICIONAL')
            }

            # Procesar cada vacuna COVID
            for ftp_col, (tipo, col_tipo, col_fecha) in covid_mapping.items():
                if ftp_col in df_original.columns:
                    # Obtener máscara de registros que tienen esta vacuna
                    mask = df_original[ftp_col].notna() & (df_original[ftp_col] != '')

                    # Asignar tipo de vacuna solo si no estaba asignado previamente
                    if tipo:  # Solo si hay tipo definido
                        df_sigires.loc[mask & (df_sigires[col_tipo] == ''), col_tipo] = tipo

                    # Asignar fecha formateada
                    df_sigires.loc[mask & (df_sigires[col_fecha] == ''), col_fecha] = formatear_fecha(
                        df_original.loc[mask, ftp_col])

            # Combinar NEUMOCOCO PRIMERA y SEGUNDA en NEUMOCOCO ULTIMA (tomar la más reciente)
            if 'NEUMOCOCO CONJUGADO 13 VALENTE PRIMERA' in df_original.columns or 'NEUMOCOCO CONJUGADO 13 VALENTE SEGUNDA' in df_original.columns:
                fechas_neumo = pd.DataFrame({
                    'primera': pd.to_datetime(df_original.get('NEUMOCOCO CONJUGADO 13 VALENTE PRIMERA', ''),
                                              format='%d/%m/%Y', errors='coerce'),
                    'segunda': pd.to_datetime(df_original.get('NEUMOCOCO CONJUGADO 13 VALENTE SEGUNDA', ''),
                                              format='%d/%m/%Y', errors='coerce')
                })

                # Obtener la fecha más reciente entre ambas
                df_sigires['NEUMOCOCO ULTIMA'] = fechas_neumo.max(axis=1).dt.strftime('%d/%m/%Y').replace('NaT', '')

            # Guardar archivo
            self.update_progress(85, "Guardando archivo...")
            nombre_salida = os.path.splitext(os.path.basename(file_path))[0] + "_SIGIRES.xlsx"
            ruta_salida = os.path.join(os.path.dirname(file_path), nombre_salida)

            # Configurar writer con formato explícito
            writer = pd.ExcelWriter(
                ruta_salida,
                engine='openpyxl',
                datetime_format='dd/mm/yyyy',
                date_format='dd/mm/yyyy'
            )

            df_sigires.to_excel(writer, index=False)

            # Aplicar formato de fecha manualmente
            workbook = writer.book
            worksheet = writer.sheets['Sheet1']

            # Identificar columnas de fecha
            date_columns = [i for i, col in enumerate(df_sigires.columns) if 'FECHA' in col]

            for col_idx in date_columns:
                for row in range(2, len(df_sigires) + 2):
                    worksheet.cell(row=row, column=col_idx + 1).number_format = 'dd/mm/yyyy'

            writer.close()

            self.update_progress(100, "Conversión completada")
            self.log(f"\n✅ Archivo generado correctamente: {ruta_salida}")
            self.show_message("Éxito", f"Archivo convertido exitosamente:\n{ruta_salida}")

        except Exception as e:
            self.log(f"\n❌ Error durante la conversión: {str(e)}")
            self.update_progress(0, "Error en la conversión")
            self.show_message("Error", f"Ocurrió un error:\n{str(e)}")
        finally:
            self.processing = False
            self.convert_btn.configure(state="normal")
            self.browse_btn.configure(state="normal")

    def update_progress(self, value, message=None):
        self.progressbar.set(value / 100)
        if message:
            self.progress_label.configure(text=message)
        self.update_idletasks()

    def log(self, message):
        self.log_text.insert("end", message + "\n")
        self.log_text.see("end")
        self.update_idletasks()

    def show_message(self, title, message):
        if title == "Éxito":
            messagebox.showinfo(title, message)
        else:
            messagebox.showerror(title, message)


if __name__ == "__main__":
    app = SIGIRESConverter()
    app.mainloop()
